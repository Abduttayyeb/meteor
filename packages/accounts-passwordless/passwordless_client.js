import { Tracker } from 'meteor/tracker';

// Used in the various functions below to handle errors consistently
const reportError = (error, callback) => {
  if (callback) {
    callback(error);
  } else {
    throw error;
  }
};

// Attempt to log in with a token.
//
// @param selector {String|Object} One of the following:
//   - {username: (username)}
//   - {email: (email)}
//   - a string which may be a username or email, depending on whether
//     it contains "@".
// @param password {String}
// @param callback {Function(error|undefined)}

/**
 * @summary Log the user in with a one time token.
 * @locus Client
 * @param token one time token generated by the server
 * @param {Function} [callback] Optional callback.
 *   Called with no arguments on success, or with a single `Error` argument
 *   on failure.
 * @importFromPackage meteor
 */
Meteor.loginWithToken = (token, callback) => {
  Accounts.callLoginMethod({
    methodArguments: [
      {
        token,
      },
    ],
    userCallback: error => {
      if (error) {
        reportError(error, callback);
      } else {
        callback && callback();
      }
    },
  });
};
/**
 * @summary Request a forgot password email.
 * @locus Client
 * @param {Object} options
 * @param {String} options.selector The email address to get a token for.
 * @param {String} options.userObject If userObject is set, create an user containing this data if selector produces no result
 * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
 * @importFromPackage accounts-base
 */
Accounts.requestLoginTokenForUser = ({ selector, userObject }, callback) => {
  if (!selector) {
    return reportError(new Meteor.Error(400, 'Must pass selector'), callback);
  }

  Accounts.connection.call(
    'requestLoginTokenForUser',
    { selector, userObject },
    callback
  );
};

const checkToken = ({ token }) => {
  if (!token) {
    return;
  }

  const userId = Tracker.nonreactive(Meteor.userId);

  if (!userId) {
    Meteor.loginWithToken(token, () => {
      // Make it look clean by removing the authToken from the URL
      if (window.history) {
        const url = window.location.href.split('?')[0];

        window.history.pushState(null, null, url);
      }
    });
  }
};
/**
 * Parse querystring for token argument, if found use it to auto-login
 */
Accounts.autoLoginWithToken = function() {
  Meteor.startup(function() {
    const params = new URL(window.location.href).searchParams;

    if (params.get('loginToken')) {
      checkToken({ token: params.get('loginToken') });
    }
  });
};
